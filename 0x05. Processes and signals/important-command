$ ps aux or ps -ef....which lists all processes running on the system along with their PIDs.
$ pgrep ....The pgrep command allows you to search for processes based on their names or other attributes and retrieve their PIDs. 
$ pidof command: The pidof command is similar to pgrep and is specifically designed to retrieve the PIDs of running processes based on their names.
$ Using the top or htop command: Both top and htop are interactive command-line utilities that provide real-time information about running processes
$ kill ... used to kill a process i.e kill 14243
$ ps -u...more details on a process
$ ps -A...This command lists even those processes that are currently not running
$ kill [pid]....used for killing a processes
$ kill -9 [pid]...This command will send a ‘SIGKILL’ signal to the process. This should be used in case the process ignores a normal kill request
$ nice -n [value] [process name]...To start a process and give it a nice value other than the default one
$ renice [value] -p 'PID'.To change nice value of a process that is already running.
1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL         5) SIGTRAP                        6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL       10) SIGUSR1
11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM       15) SIGTERM
16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP       20) SIGTSTP
21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU       25) SIGXFSZ
26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO 30) SIGPWR
31) SIGSYS      40) SIGRTMIN    41) SIGRTMIN+1  42) SIGRTMIN+2    43) SIGRTMIN+3
44) SIGRTMIN+4  45) SIGRTMIN+5  46) SIGRTMIN+6  47) SIGRTMIN+7    48) SIGRTMIN+8
49) SIGRTMIN+9  50) SIGRTMIN+10 51) SIGRTMIN+11 52) SIGRTMIN+12   53) SIGRTMAX-11
54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7    58) SIGRTMAX-6
59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2    63) SIGRTMAX-1
64) SIGRTMAX
Certainly! Let's explore the meanings and uses of the keywords you mentioned in the context of Linux and software engineering:

$. `ps` (Process Status):
   The `ps` command is used to display information about running processes on a Linux system. It provides a snapshot of the current processes, their resource usage, and other details. You can use various options with `ps` to customize the output and filter processes based on criteria like user, process ID, or process name. It helps in monitoring and managing processes.

$. `pgrep` (Process Grep):
   The `pgrep` command is used to search for processes based on their names or other attributes and retrieve their Process IDs (PIDs). You can provide a process name or a regular expression pattern to match against process names. `pgrep` is commonly used in scripting and automation to find and interact with specific processes.

$. `pkill` (Process Kill):
   The `pkill` command is used to send signals to processes based on their names or other attributes and terminate them. Similar to `pgrep`, you can provide a process name or a pattern, and `pkill` will find the matching processes and send a signal, usually SIGTERM by default, to terminate them. It provides a convenient way to stop processes without explicitly knowing their PIDs.

$. `kill`:
   The `kill` command is used to send signals to processes. It allows you to explicitly specify the PID of the process to target or use other attributes to identify the process. By default, `kill` sends the SIGTERM signal, which politely asks the process to terminate. However, you can specify different signals, such as SIGKILL, which forcefully terminates the process. `kill` is a versatile command for managing processes and controlling their behavior.

$ `exit`:
   The `exit` keyword is used within scripts or interactive shell sessions to exit or terminate the current process. It is commonly used to gracefully end a script or a shell session once a certain condition or task is completed. The `exit` command can also be provided with an exit status, which is a numeric value indicating the result or status of the process. A zero status typically denotes success, while non-zero values represent different types of errors or failures.

$ `trap`:
   The `trap` command is used in shell scripting to set up actions or behaviors to be executed when specific signals are received by the script or shell session. It allows you to define signal handlers that specify how the script should respond to signals. For example, you can use `trap` to catch the SIGINT signal (generated by pressing Ctrl+C) and perform specific cleanup or actions before the script terminates. `trap` provides control and customization over signal handling in shell scripts.
