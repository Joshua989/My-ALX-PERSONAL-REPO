In Linux, a PID (Process IDentifier) is a unique numeric identifier assigned to each running process. PIDs are used by the operating system to manage and track processes. There are several ways to obtain the PID of a process:

1. Using the `ps` command: You can use the `ps` command with various options to display information about running processes, including their PIDs. The most common usage is `ps aux` or `ps -ef`, which lists all processes running on the system along with their PIDs.

   Example:
   ```
   $ ps aux
   USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
   root         1  0.0  0.1 169848  9384 ?        Ss   Jun12   0:04 /sbin/init
   ...
   ```

2. Using the `pgrep` command: The `pgrep` command allows you to search for processes based on their names or other attributes and retrieve their PIDs. You can provide a process name or a regular expression pattern to match against process names.

   Example:
   ```
   $ pgrep firefox
   1234
   ```

3. Using the `pidof` command: The `pidof` command is similar to `pgrep` and is specifically designed to retrieve the PIDs of running processes based on their names.

   Example:
   ```
   $ pidof firefox
   1234
   ```

4. Using the `top` or `htop` command: Both `top` and `htop` are interactive command-line utilities that provide real-time information about running processes. They display a dynamic list of processes along with their PIDs.

   Example:
   ```
   $ top
   PID   USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND
   1234  username  20   0 1234567 123456  12345 S   0.0  0.0   0:00.00 process_name
   ...
   ```

These are some of the common methods to find the PID of a process in Linux. You can choose the one that best suits your needs or explore other options based on the available tools and utilities on your system.